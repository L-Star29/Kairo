generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  accounts      Account[]
  sessions      Session[]
  classes       Class[]
  events        Event[]
  tasks         Task[]
  preferences   UserPreferences?
}

model Class {
  id                String   @id @default(cuid())
  name              String
  difficulty        Int
  teacherName       String
  teacherStrictness Int
  userId            String
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  tasks             Task[]
}

model Task {
  id            String     @id @default(cuid())
  title         String
  description   String?
  dueDate       DateTime
  priority      Int
  status        TaskStatus @default(PENDING)
  estimatedTime Int
  classId       String
  userId        String
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
  class         Class      @relation(fields: [classId], references: [id], onDelete: Cascade)
  user          User       @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Event {
  id          String    @id @default(cuid())
  title       String
  description String?
  startTime   DateTime
  endTime     DateTime
  type        EventType
  userId      String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model UserPreferences {
  id             String   @id @default(cuid())
  userId         String   @unique
  theme          String   @default("light")
  notifications  Boolean  @default(true)
  studyStartTime String   @default("08:00")
  studyEndTime   String   @default("22:00")
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  user           User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum TaskStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  OVERDUE
}

enum EventType {
  SPORTS
  CLUB
  JOB
  RELIGIOUS
  FAMILY
  TUTORING
  OTHER
}
